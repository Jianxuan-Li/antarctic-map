name: release

on:
  release:
    types: [published]

env:
  # Define image names
  BACKEND_IMAGE: antarcticmap/backend
  FRONTEND_IMAGE: antarcticmap/frontend


jobs:
  config:
    runs-on: [ubuntu-latest]

    steps:
      # - name: Download artifacts
      #   uses: actions/download-artifact@v2
      #   with:
      #     name: deployment

      - name: Set output
        id: vars
        run: echo ::set-output name=tag::${GITHUB_REF/refs\/tags\//}

      - uses: actions/checkout@v2
        with:
          ref: ${{ steps.vars.outputs.tag }}
        
      - name: Check output
        run: |
          echo ${{ steps.vars.outputs.tag }}
          echo ${{ steps.vars.outputs.tag }} > version.txt
          
      - name: Upload version file
        uses: actions/upload-artifact@v2
        with:
          name: deployment
          path: version.txt

  # Build and push image to Docker registry.
  build:
    # Ensure config job passes before building image.
    needs: config

    runs-on: [ubuntu-latest]

    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set image version
        id: vars
        run: echo ::set-output name=tag::${GITHUB_REF/refs\/tags\//}

      - name: Check image version
        env:
          IMAGE_TAG: ${{ steps.vars.outputs.tag }}
        run: |
          echo $IMAGE_TAG

      - uses: actions/checkout@v2
        with:
          ref: ${{ steps.vars.outputs.tag }}

      - name: Replace variables
        env:
          IMAGE_TAG: ${{ steps.vars.outputs.tag }}
        run: |
          sed -i "s@__IMAGE_TAG__@$IMAGE_TAG@g" docker-compose.yml
          sed -i "s@__IMAGE_FRONTEND__@$FRONTEND_IMAGE@g" docker-compose.yml
          sed -i "s@__IMAGE_BACKEND__@$BACKEND_IMAGE@g" docker-compose.yml

      - name: Build image
        run: |
          docker-compose build --no-cache antarctic_map_static
          docker-compose build antarctic_map_django

      - name: Push image
        env:
          IMAGE_TAG: ${{ steps.vars.outputs.tag }}
        run: |
          docker push $FRONTEND_IMAGE:$IMAGE_TAG
          docker push $BACKEND_IMAGE:$IMAGE_TAG

  
